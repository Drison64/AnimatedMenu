{
  "title": "Items",
  "description": [
    "What are menus without items?"
  ],
  "options": {
    "@": "Animatable",
    "+": "Animatable with Plus version",
    "%": "Supports placeholders",
    "{": "Supports special placeholders",
    "/": "Formula",
    "<": "Script",
    ";": "Section of Key-Section pairs"
  },
  "config": [
    {
      "title": "Standard features",
      "values": [
        {
          "name": "Slot",
          "options": "!/{",
          "description": [
            "The slot to put this item in, between 1 and the menu's size.",
            "Instead of a slot, format '<X>, <Y>' is also supported. See #X and #Y for info on those values",
            "You can also use #X and #Y separately instead",
            "If you wish to put certain items at multiple slots, that is possible as well",
            "You can specify a list of slots to put it in, and for each entry also a range",
            "A range has format <from>-<to>. These values do not support placeholders however",

            "If you have the Plus version, this accepts formulas as well, with these placeholders:",
            [
              "*{first_empty}*: The first empty slot in the menu",
              "*{first_empty_<slot>}*: The first empty slot starting at <slot>",
              "*{last_empty}*: The last empty slot in the menu",
              "*{last_empty_<slot>}*: The last empty slot starting at the menu's size - <slot>",
              "*{random*}: A random slot",
              "*{random_<from>_<to>}*: A random slot, between <from> and <to>",
              "*{random_empty}*: A random empty slot",
              "*{highest_amount}*: Puts this item before items with a lower amount",
              "*{lowest_amount}*: Puts this item before items with a higher amount",
              "*{highest_weight}*: Puts this item before items with a lower #Weight",
              "*{lowest_weight}*: Puts this item before items with a higher #Weight"
            ]
          ]
        }, {
          "name": "X",
          "description": "The X (horizontal) position of the item, from 1 to the menu's width"
        }, {
          "name": "Y",
          "description": "The Y (vertical) position of the item, from 1 to the menu's height"
        }, {
          "name": "Frame-Delay",
          "default": "20",
          "description": "The delay in ticks between each frame"
        }, {
          "name": "Refresh-Delay",
          "default": "Value of Frame-Delay",
          "description": "The delay in ticks between placeholder updates"
        }, {
          "name": "Material",
          "options": "@%",
          "default": "stone",
          "description": [
            "The material of this item, in format <type>:<amount>:<data>",
            "Note: Numerical IDs are still supported (and might be for a while), but I recommended using names",
            "<amount> and <data> are optional",
            "A nice list of item ids can be found on @{http://minecraft-ids.grahamedgecombe.com/|this page}"
          ]
        }, {
          "name": "Name",
          "options": "@%",
          "default": "The key of the item's section",
          "description": "The display name of this item"
        }, {
          "name": "Lore",
          "options": ",@%",
          "description": "The lore of this item"
        }, {
          "name": "Enchantments",
          "options": ",+",
          "description": [
            "The enchantments that should be applied to this item",
            "@{http://minecraft.gamepedia.com/Enchanting/ID|Here} is a list of ids"
          ]
        }, {
          "name": "Color",
          "options": "+",
          "description": [
            "The color to give to leather armor, can be either:",
            [
              "*<red>, <green>, <blue>* where each color is from 0 to 255",
              "*RRGGBB* where each position ranges from 0-9 and A-F"
            ]
          ]
        }, {
          "name": "Skull-Owner",
          "options": "%+",
          "description": [
            "The skull owner, if this item is a player skull, can be either:",
            [
              "A player's username",
              "A player's UUID (with or without hyphens)",
              "A json object containing profile information",
              "Base64 encoded profile texture"
            ]
          ]
        }, {
          "name": "Egg-Type",
          "options": "+",
          "description": "The entity type of a spawn egg. See [this](https://hub.spigotmc.org/javadocs/spigot/org/bukkit/entity/EntityType.html) page for a list of types"
        }, {
          "name": "Banner-Pattern",
          "options": "+",
          "description": [
            "The banner pattern to apply to a banner",
            "It uses a pattern generated by @{http://www.needcoolshoes.com/banner|Miners Need Cool Shoes}",
            "When you have created your banner, use this part as value:",
            "@[https://i.gyazo.com/851f4e73a253aeeefc539baac385bba3.png]"
          ]
        }, {
          "name": "Hide-Flags",
          "options": "+",
          "description": [
            "The hide flags to apply to this item. List of flags:",
            [
              "1 = *Enchants*",
              "2 = *Attributes*",
              "4 = *Unbreakable*",
              "8 = *Destroys*",
              "16 = *Placed-On*",
              "32 = *Potion-Effects* (note: also includes shield pattern info and other stuff)"
            ],
            "You can either specify the sum of the numbers you need, or have a comma-separated list of their names"
          ]
        }, {
          "name": "View-Permission",
          "description": [
            "A permission required to see this item",
            "Start with a dash ( - ) to negate the effect (only visible without permission)"
          ]
        }, {
          "name": "Unbreakable",
          "description": [
            "Whether this item should be unbreakable or not",
            "Could be useful for custom item textures per durability",
            "NOTE: When you have the Plus version, you should use #NBT instead (this won't even work)"
          ]
        }, {
          "name": "Click-Handlers",
          "options": ";",
          "description": [
            "(This used to be called Commands, but I changed it because it makes more sense)",
            "The click handlers of this item, that specify what commands to perform at which clicks",
            "See the @{click_handlers.md|Click-Handlers} page for info on this"
          ]
        }
      ]
    }, {
      "title": "Plus features",
      "values": [
        {
          "name": "Template",
          "description": "Specifies a template to use from the defined ones in @{config.md#templates|Templates}"
        }, {
          "name": "Weight",
          "default": "0",
          "options": "/",
          "description": [
            "The weight of this item, to use with {highest_weight} and {lowest_weight}",
            "You can use this to, for example, sort a menu by player count on different servers",
            "It accepts negative and large values to force certain items at specific positions"
          ]
        }, {
          "name": "View-Script",
          "options": "%<",
          "description": [
            "Some JavaScript code that checks if a player can see this item",
            "For example, '%vault_eco_balance% >= 100' checks if the player has at least $100"
          ]
        }, {
          "name": "NBT",
          "options": "@:",
          "description": [
            "A section containing specific NBT values, such as Unbreakable",
            "This works just like in the /give command, but now it's in YML format",
            "If you set #Animate-NBT to true, this value is animated"
          ]
        }, {
          "name": "Animate-NBT",
          "description": [
            "In AnimationLib 1.5.2 I added an option to animate values that are sections themselves",
            "Specifies whether NBT should be animated"
          ]
        }, {
          "name": "State",
          "options": "%",
          "description": [
            "Specifies a certain text to evaluate to determine what item this should be",
            "You can use #States to set config options per result",
            "When this is set, options are loaded as followed:",
            [
              "#Slot, #Frame-Delay and #Refresh-Delay should be specified here",
              "All the other config options are only loaded under each #States value",
              "You can even use nested states! Go nuts!"
            ],
            "You can prefix the state for specific results (doesn't require placeholders):",
            [
              "*permission:* returns 'yes' if the player has a permission, 'no' otherwise",
              "*money:* returns 'yes' if the player has X amount of money, 'no' otherwise",
              "*points:* returns 'yes' if the player has X amount of (player)points, 'no' otherwise",
              "*level:* returns 'yes' if the player has at least a certain XP level, 'no' otherwise"
            ]
          ]
        }, {
          "name": "State-Template",
          "options": ":",
          "description": [
            "Specifies a template to use in each section of #States.",
            "You could also use #Template in each state value, but it can be prettier to use this instead of specifying a config.yml template",
            "You could also combine this with #Template, in which case this will override the values of the config template"
          ]
        }, {
          "name": "States",
          "options": ";",
          "description": [
            "Specifies mappings from values retrieved in #State to item info",
            "The key is the value to accept. You can separate it by a semicolon (;) to accept multiple results",
            "Each value supports placeholders and special placeholders",
            "You can use every standard item config option here, except for the ones mentioned in #State",
            "A small but working example:",
            [
              "===CODE YAML===",
              "#The :#: makes it a whole number, floor rounds a number down and round rounds a number to the nearest whole number",
              "State: '\\(:#:floor(round(%player_health%) / 5))'",
              "#Specify some default values reused in each state (can be overridden):",
              "State-Template:",
              "  Click-Handlers:",
              "  - Commands:",
              "    - 'message: &aYou got me :D'",
              "States:",
              "  0: # Red wool",
              "    Material: wool:1:14",
              "    Name: '&cYou nearly dead man!'",
              "  1: # Orange wool",
              "    Material: wool:1:1",
              "    Name: '&6Careful, your health is getting low!'",
              "  2;3: # Yellow wool",
              "    Material: wool:1:4",
              "    Name: '&eKeep your health up like that!'",
              "  4: # Green wool",
              "    Material: wool:1:5",
              "    Name: '&aYou got health for days!'"
            ]
          ]
        }
      ]
    }
  ]
}
